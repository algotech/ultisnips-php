priority -40

snippet sfbundle "Symfony2 / Bundle / Bundle class" b
<?php

namespace `!v ultisnips_php#resolve_namespace()`;

use Symfony\Component\HttpKernel\Bundle\Bundle;

/**
 * Class: `!p snip.rv = snip.basename or "BundleClass"`
 *
 * @see http://symfony.com/doc/current/cookbook/bundles/best_practices.html
 * @see Bundle
 */
class `!p snip.rv = snip.basename or "BundleClass"` extends Bundle
{
}
endsnippet

snippet sfbundleextension "Symfony2 / Bundle / Extension class" b
<?php

namespace `!v ultisnips_php#resolve_namespace()`;

use Symfony\Component\Config\FileLocator;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader;
use Symfony\Component\HttpKernel\DependencyInjection\Extension;


/**
 * Class: `!p snip.rv = snip.basename or "ExtensionClass"`
 *
 * This is the class that loads and manages your bundle configuration.
 *
 * @see http://symfony.com/doc/current/cookbook/bundles/extension.html
 * @see Extension
 */
class `!p snip.rv = snip.basename or "ExtensionClass"` extends Extension
{
	/**
	 * {@inheritDoc}
	 */
	public function load(array $configs, ContainerBuilder $container)
	{
		$configuration = new Configuration();
		$config = $this->processConfiguration($configuration, $configs);
		${0}
		$loader = new Loader\YamlFileLoader(
			$container,
			new FileLocator(__DIR__.'/../Resources/config')
		);

		$loader->load('services.yml');
	}
}
endsnippet

snippet sfbundleconfig "Symfony2 / Bundle / Config class" b
<?php

namespace `!v ultisnips_php#resolve_namespace()`;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;

/**
 * Class: `!p snip.rv = snip.basename or "ConfigurationClass"`
 *
 * This is the class that validates and merges configuration
 * from your app/config files.
 *
 * @see http://symfony.com/doc/current/cookbook/bundles/extension.html
 * @see ConfigurationInterface
 */
class `!p snip.rv = snip.basename or "ConfigurationClass"` implements ConfigurationInterface
{
	/**
	 * {@inheritDoc}
	 */
	public function getConfigTreeBuilder()
	{
		$treeBuilder = new TreeBuilder();
		$rootNode = $treeBuilder->root('${1:bundle_namespace}');
		${0}
		return $treeBuilder;
	}
}
endsnippet
